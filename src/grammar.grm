"Name"      = 'TODO: MyLanguage Grammar'
"Author"    =  'TODO: List of Authors'
"Version"   = '0.1'
"About"     = 'TODO: MyLanguage Grammar,'

"Case Sensitive"    = True
"Start Symbol"      = <Programa>

! =================================================
! Conjuntos de Caracteres
! =================================================

{CabecaDoIdentificador} = {Letter}
{CaudaDoIdentificador}  = {Alphanumeric} + [_]
{StringSimbolos}= {Printable}-["\]

! =================================================
! Símbolos Terminais
! =================================================

identificador   = {CabecaDoIdentificador}{CaudaDoIdentificador}*
Digitos         = ( '-' )? {Number}+ ( '.' {Number}+ )?
CadeiaDeCaracteres        = '"' ({StringSimbolos} | '\' {Printable})* '"'

! =================================================
! Regras
! =================================================

! -------------------------------------------------
! Declaração de Função, Procedimentos, método de início
! -------------------------------------------------

<DeclaracaoDeFuncao>        ::= 'function' <FuncID> '(' <FuncaoProcedimentoFim>

<DeclaracaoDeProcedimento>  ::= 'procedure' Identificador '(' <FuncaoProcedimentoFim>

<FuncaoProcedimentoFim>     ::= <Parametros> ')' <Bloco> 
                            | ')' <Bloco>

<DeclaracaoDeInicio>    ::= 'start' '(' ')' <Bloco>

<Bloco>     ::= '{' <BlocoAux>
<BlocoAux>  ::= <ListaDeIntrucoes> '}'
            | '}'

<FuncID>    ::= <Tipo> Identificador

<Parametros>    ::= <Parametro> <ParametrosAux>
<ParametrosAux> ::= ',' <Parametros>
                | <> ! Produção Vazia

<Parametro>     ::= <Tipo> Identificador

! -------------------------------------------------
! Declaração de Tipo (Typedef)
! -------------------------------------------------

<DeclaracaoDeTypedef>       ::= 'typedef' <DeclaracaoDeTypedefAux>
<DeclaracaoDeTypedefAux>    ::= <Tipo> Identificador ';'

! -------------------------------------------------
! Base (Core)
! -------------------------------------------------

<Programa>      ::= <Declaracao> <ProgramaAux>

<ProgramaAux>   ::= <Programa>
                | <> ! Produção Vazia

! Aqui devem ficar apenas as estruturas que podem ser criadas fora de um Bloco
! Exemplo: Funções, Variaveis, Estruturas, Typedef, Procedimentos, Start
<Declaracao>    ::= <DeclaracaoDeFuncao>
                | <DeclaracaoDeProcedimento>
                | <DeclaracaoDeInicio>
                | <DeclaracaoDeVar>
                | <DeclaracaoDeConst>
                | <DeclaracaoDeStruct>
                | <DeclaracaoDeTypedef>

! -------------------------------------------------
! Instruções
! -------------------------------------------------

<ListaDeIntrucoes>      ::= <Instrucao> <ListaDeIntrucoesAux>
<ListaDeIntrucoesAux>   ::= <ListaDeIntrucoes>
                        | <> ! Produção Vazia

! Instrução deve ser capaz de produzir todos os comandos que podem ficar dentro de um bloco
! Exemplo dos blocos: if, função, procedimento, while, etc... 
! Exemplo das instruções: if, while, Chamada de função, print, scan, etc... ! TODO: Colocar os outros Statements aqui
<Instrucao> ::= <InstrucaoNormal>
            | <EstruturaCondicional>
            | <While>
            | <DeclaracaoDeVar>
            | <DeclaracaoDeConst>
            | <DeclaracaoDeStruct>

! Instrução Normal são as insrtuções de unica linha que terminal com ';'
! Exemplo: a = b;, print();, scan();, chamadaDeFuncao();
<InstrucaoNormal>   ::= <OperacaoDeAtribuicao> ';'
                    | <InstrucaoDeRetorno> ';'
                    | <Print> ';'
                    | <Scan> ';'

<InstrucaoDeRetorno>    ::= 'return' <InstrucaoDeRetornoAux>
<InstrucaoDeRetornoAux> ::= <Expressao> 
                        | <> ! Produção Vazia

! -------------------------------------------------
! Tipos
! -------------------------------------------------

<Tipo>      ::= <TipoBase> <TipoAux>
<TipoAux>   ::= <TipoVetorDeclarando>
            | <> ! Produção Vazia

<TipoBase>  ::= <Escalar>
            | <DeclaracaoDeStruct>
            | Identificador

<Escalar>   ::= 'int'
            | 'float'
            | 'bool'
            | 'string'

! Permite utilização de tipos vector, tando em inicialização de variáveis como em retorno de funções

<TipoVetorDeclarando>       ::= <TipoVetorDeclarado> <TipoVetorDeclarandoAux>
<TipoVetorDeclarandoAux>    ::= <TipoVetorDeclarando>
                            | <> ! Produção Vazia

<TipoVetorDeclarado>    ::= '[' ']'

! -------------------------------------------------
! Precedência de Operadores
! -------------------------------------------------

<OperacaoDeAtribuicao>  ::= <Final> '=' <Expressao>
                        | Identificador '=' <Expressao>
                        | <Expressao>


<ParametrosFuncao>      ::= <Expressao> <ParametrosFuncaoAux>
<ParametrosFuncaoAux>   ::= ',' <ParametrosFuncao>
                        | <> ! Produção Vazia

! Expressao diz respeito a qualquer conjunto de valores que podem ficar
! do lado direto de uma expressão de atribuição

<Expressao> ::= <OpMult> <ExpressaoAux>
<ExpressaoAux>     ::= '+' <OpMult> <ExpressaoAux>
        | '-' <OpMult> <ExpressaoAux>
        | <> ! Produção Vazia

<OpMult>        ::= <OpUnary> <OpMultAux>
<OpMultAux>     ::= '*' <OpUnary> <OpMultAux>
                | '/' <OpUnary> <OpMultAux>
                | <> ! Produção Vazia

<OpUnary>   ::= '!' <OpUnary>
            | '++' <OpUnary>
            | '--' <OpUnary>
            | <Final>
            | <Valor>

<Final>     ::= Identificador <Acessando> 

<Acessando>     ::= <Acesso> <AcessandoAux>
<AcessandoAux>  ::= <Acessando>
                | <> ! Produção Vazia

<Acesso>        ::= '.' Identificador ! Acesso de campo
                | '[' <Valor> ']' ! Acesso de array

! <Valor> deve ser o ultimo nível de precedência
<Valor>     ::= Identificador <ValorAux1>
            | '(' <Expressao> ')'
            | Digitos
            | CadeiaDeCaracteres
            | 'true'
            | 'false'
<ValorAux1> ::= '(' <ValorAux2>
            | <> ! Produção Vazia
<ValorAux2> ::=  <ParametrosFuncao> ')' ! Função ou procedimento com parametros
            | ')' ! Função ou procedimento sem parametros

! -------------------------------------------------------------------
! Operação relacional e Lógica
! -------------------------------------------------------------------

<ExpressaoRelacional>   ::=  <OpLogica>
                        | '!' <OpLogica> 

<OpLogica>      ::= <OpLogica> <EscalarLogico> <OpRelacional>
                | <OpRelacional>

<EscalarLogico> ::= '&&'
                | '||'

<OpRelacional>  ::= <OpRelacional> <EscalarRelacional> <ValorRelacional>
                | <ValorRelacional>
                | <Final>

<EscalarRelacional> ::= '!='
                    | '=='
                    | '<'
                    | '<='
                    |'>'
                    |'>='

! <ValorRelacional> deve ser o ultimo nível de precedência
<ValorRelacional>   ::= Identificador <ValorRelacionalAux1>
                    | '(' <ExpressaoRelacional> ')'
                    | Digitos
                    | CadeiaDeCaracteres
                    | 'true'
                    | 'false'
<ValorRelacionalAux1>   ::= '(' <ValorRelacionalAux2>
                        | <> ! Produção Vazia
<ValorRelacionalAux2>   ::=  <ParametrosFuncao> ')' ! Função ou procedimento com parametros
                        | ')' ! Função ou procedimento sem parametros

! -------------------------------------------------------------------
! Declaração de Bloco Variáveis 
! -------------------------------------------------------------------
<DeclaracaoDeVar>               ::= 'var'  '{'  <DeclaracaoDeVariavelCorpo> '}'

<DeclaracaoDeVariavelCorpo>     ::= <DeclaracaoDeVariavelLinha> <DeclaracaoDeVariavelCorpoAux>
<DeclaracaoDeVariavelCorpoAux>  ::= <DeclaracaoDeVariavelCorpo>
                                | <> ! Produção Vazia 

<DeclaracaoDeVariavelLinha>     ::= <Tipo> <ExpressaoIdentificadoresVar>

<ExpressaoIdentificadoresVar>       ::= <ExpressaoIdentificadorVar> <ExpressaoIdentificadoresVarAux>
<ExpressaoIdentificadoresVarAux>    ::= ';'
                                    | ',' <ExpressaoIdentificadoresVar>

<ExpressaoIdentificadorVar>     ::= Identificador <ExpressaoIdentificadorVarAux>
<ExpressaoIdentificadorVarAux>  ::=  '=' <Expressao>
                                | <> ! Produção Vazia

! -------------------------------------------------------------------
! Declaração de Bloco Constante 
! -------------------------------------------------------------------

<DeclaracaoDeConst>             ::= 'const'  '{'  <DeclaracaoDeConstanteCorpo> '}'

<DeclaracaoDeConstanteCorpo>    ::= <DeclaracaoDeConstanteLinha> <DeclaracaoDeConstanteCorpoAux>
<DeclaracaoDeConstanteCorpoAux> ::= <DeclaracaoDeConstanteCorpo>
                                | <>

<DeclaracaoDeConstanteLinha>    ::= <Tipo> <ExpressaoIdentificadoresConst>

<ExpressaoIdentificadoresConst>     ::= <ExpressaoIdentificadorConst> <ExpressaoIdentificadoresConstAux>
<ExpressaoIdentificadoresConstAux>  ::= ';' 
                                    | ',' <ExpressaoIdentificadoresConst>

<ExpressaoIdentificadorConst>   ::= Identificador '=' <Expressao>

! -------------------------------------------------------------------
! Declaração de Bloco Struct 
! -------------------------------------------------------------------

<DeclaracaoDeStruct>    ::= 'struct' <DeclaracaoDeStructAux> ! TODO: Tem que adicionar o Extends
<DeclaracaoDeStructAux> ::= Identificador <Extends>'{'  <DeclaracaoDeStructCorpo> '}'
                        | <Extends>'{'  <DeclaracaoDeStructCorpo> '}'
<Extends>               ::= 'extends' Identificador
                        | <>

<DeclaracaoDeStructCorpo>       ::= <DeclaracaoDeStructLinha> <DeclaracaoDeStructCorpoAux>
<DeclaracaoDeStructCorpoAux>    ::= <DeclaracaoDeStructCorpo>
                                | <>

<DeclaracaoDeStructLinha>    ::= <Tipo> <ExpressaoIdentificadoresStruct>

<ExpressaoIdentificadoresStruct>    ::= <ExpressaoIdentificadorStruct> <ExpressaoIdentificadoresStructAux>
<ExpressaoIdentificadoresStructAux> ::= ';'
                                    | ',' <ExpressaoIdentificadoresStruct>

<ExpressaoIdentificadorStruct>   ::= Identificador ! Campos em Struct não podem ser previamente iniciadas

! -------------------------------------------------------------------
! Estruturas condicionais: If...Then, If...Then...Else
! -------------------------------------------------------------------

<EstruturaCondicional>      ::= <IfThen> <EstruturaCondicionalAux>
<EstruturaCondicionalAux>   ::= 'else' <Bloco>
                            | <>

<IfThen> ::= 'if' '(' <ExpressaoRelacional> ')' 'then' <Bloco>

! -------------------------------------------------------------------
! Estruturas condicionais: While
! -------------------------------------------------------------------

<While> ::= 'while' '(' <ExpressaoRelacional> ')' <Bloco>

! -------------------------------------------------------------------
! Print & Scan
! -------------------------------------------------------------------

<Print>         ::= 'print' '(' <Saida> <OutrasSaidas> ')'
<Saida>           ::= <Final> | <Expressao>
<OutrasSaidas>  ::= ',' <Saida> <OutrasSaidas> 
                | <> ! Produção Vazia

<Scan>              ::= 'scan' '(' <Entrada> <OutrasEntradas> ')'
<Entrada>           ::= <Final> | Identificador
<OutrasEntradas>    ::= ',' <Entrada> <OutrasEntradas> 
                    | <> ! Produção Vazia
