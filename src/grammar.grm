"Name"     = 'TODO: MyLanguage Grammar'
"Author"   =  'TODO: List of Authors'
"Version"  = '0.1'
"About"    = 'TODO: MyLanguage Grammar,'

"Case Sensitive" = True
"Start Symbol" = <Programa>

! =================================================
! Conjuntos de Caracteres
! =================================================

{CabecaDoIdentificador} = {Letter}
{CaudaDoIdentificador}       = {Alphanumeric} + [_]

! =================================================
! Símbolos Terminais
! =================================================

Identificador      = {CabecaDoIdentificador}{CaudaDoIdentificador}*
Digitos = ('-')?{Number}+('.'{Number}+)?
Caracter  = '"' ({Letter}|{Number}|'\"'| {Space} |'!' | '"' | '#' | '$' | '%' | '&' | '(' | ')' | '*' | '+'| ',' | '-' |'.' | '/' | '/' | ':' | ';' | '<' | '>' | '=' | '?' | '@' | '[' | ']' | '\' | '^' | '_' | '`'  | '{' | '|' | '}' | '~')* '"'



! =================================================
! Regras
! =================================================

! -------------------------------------------------
! Declaração de Função, Procedimentos e método de início
! -------------------------------------------------

<DeclaracaoDeFuncao>  ::= 'function' <FuncID> '(' <Parametros> ')' <Bloco>
                        | 'function' <FuncID> '(' ')' <Bloco>

<DeclaracaoDeProcedimento> ::= 'procedure' <ProcID> '(' <Parametros> ')' <Bloco>
                        | 'procedure' <ProcID> '(' ')' <Bloco>
                                               
<DeclaracaoDeInicio>     ::= 'start' '(' ')' <Bloco>

<Bloco>     ::= '{' <ListaDeIntrucoes> '}'
            | '{' '}'

<FuncID>    ::= <Tipo> Identificador

<ProcID>    ::= Identificador

<Parametros>    ::= <Parametro> ',' <Parametros>
            | <Parametro>

<Parametro>      ::= <Tipo> Identificador

! -------------------------------------------------
! Base e instruções
! -------------------------------------------------

<Programa>    ::= <Declaracoes>

<Declaracoes>  ::= <Declaracao> <Declaracoes>
                | <Declaracao> ! TODO: Verificar situação que o programa não tem declarações

! Aqui devem ficar apenas as estruturas que podem ser criadas fora de um Bloco
! Exemplo: Funções, Variaveis, Estruturas, Typedef, Procedimentos, Start
<Declaracao>   ::= <DeclaracaoDeFuncao>
                | <DeclaracaoDeProcedimento>
                | <DeclaracaoDeInicio>
                | <DeclaracaoDeBlocoVar> 

<ListaDeIntrucoes>    ::= <Instrucao> 
                    | <Instrucao> <ListaDeIntrucoes>

<Instrucao> ::= <InstrucaoNormal> ! TODO: Colocar os outros Statements aqui

<InstrucaoNormal>    ::= <Expressao> ';' 
                | <InstrucaoDeRetorno>

<InstrucaoDeRetorno>  ::= 'return' ';'
                    | 'return' <Expressao> ';'

! -------------------------------------------------
! Tipos
! -------------------------------------------------

<Tipo>      ::= <Escalar>
            | struct Identificador
            | Identificador

<Escalar>    ::= int
            | float
            | bool
            | string
            
! -------------------------------------------------
! Operadores
! -------------------------------------------------
!
! <OperadorRelacional> ::= '!='
!                       | '=='
!                       | '<'
!                       | '<='
!                       | '>'
!                       | '>='
!                       | '='
! 
! <OperadorLogico> ::= <OperadorNegacao>
!                     | <OperadorE>
!                     | <OperadorOu>
!                                           
! <OperadorNegacao> ::= '!' ! TODO: Remover produção unitária
! <OperadorE> ::= '&&'
! <OperadorOu> ::= '||'

! -------------------------------------------------
! Precedencia de Operadores
! -------------------------------------------------

<Expressao>    ::= <OperacaoDeAtribuicao> ',' <Expressao> ! TODO: Mudar <OperacaoDeAtribuicao> para o proximo nivel de precedencia
                | <OperacaoDeAtribuicao> ! TODO: Mudar <OperacaoDeAtribuicao> para o proximo nivel de precedencia

! TODO: Levels of operator precedence.

<OperacaoDeAtribuicao> ::= <Final> '=' <OpAdicao>
                        | Identificador '=' <OpAdicao>
                        | <OpAdicao>

<OpAdicao> ::= <OpAdicao> '+' <OpMult> ! TODO: Remover recursividade Esquerda e fatorar
               | <OpAdicao> '-' <OpMult>
               | <OpMult>

<OpMult>    ::= <OpMult> '*' <OpUnary> ! TODO: Remover recursividade Esquerda e fatorar
               | <OpMult> '/' <OpUnary>
               | <OpUnary>

<OpUnary>   ::= '!' <OpUnary>
            | '++' <OpUnary>
            | '--' <OpUnary>
            | <Final>
            | <Valor>

<Final>     ::= Identificador <Acessando> 

<Acessando>        ::= <Acesso> | <Acesso> <Acessando> 

<Acesso>        ::= '.' Identificador ! Acesso de campo
                | '[' <Valor> ']' ! Acesso de array


! <Valor> must be the last level of precedence

<Valor> ::= Identificador '(' <Expressao> ')' ! Funcao com parametros
            | Identificador '(' ')' ! Funcao sem parametros
            | Identificador ! Valor simples
            | '(' <Expressao> ')'


! -------------------------------------------------------------------
! Declaração de Bloco Variáveis 
! -------------------------------------------------------------------
<DeclaracaoDeBlocoVar> 
          ::= var  '{'  <CorposDeclaracaoBlocoVar> '}'          
            
<CorposDeclaracaoBlocoVar>
          ::= <CorpoDeclaracaoBlocoVar>
          | <CorpoDeclaracaoBlocoVar> <CorposDeclaracaoBlocoVar>
          
<CorpoDeclaracaoBlocoVar> 
        ::= <Escalar>  <ExpressaoIdentificadoresVar>         
        | Identificador  <ExpressaoIdentificadoresVar>  
               
<ExpressaoIdentificadoresVar> 
          ::= <ExpressaoIdentificadorVar>  ';' 
          |   <ExpressaoIdentificadorVar> ',' <ExpressaoIdentificadoresVar>

<ExpressaoIdentificadorVar> 
         ::= Identificador'='Digitos
          | Identificador
          | Identificador'='Identificador
          | '['']' Identificador
          | '['']' '['']' Identificador
          !! adicionar para receber retorno de função
         
! -------------------------------------------------------------------
! Estruturas condicionais: If...Then, If...Then...Else
! -------------------------------------------------------------------
!  
! <DeclaracaoEstruturaCondicional> ::= <IfThen>
!                         | <IfThen> 'else' <Bloco>       
!                                
! <IfThen> ::= 'if' '(' <OperacaoRelacional> ')' 'then' <Bloco>
! 
! -------------------------------------------------------------------
! Print
! Delimitador = /n /t
! -------------------------------------------------------------------

!Comentei esse trecho porque está dando erro
!<print> ::= 'print' '(' <Identificador | <Identificador> <var> <identificador> |
                        !|<Identificador> <var>
                        !|<var> <Identificador>
                        !| ')' ';''

!<printf> ::= 'printf' '(<Identificador> + <delimitador>)' ';' 
!   
!   Fiquei na dúvida se já poderia ser assim:
!
!<printf> ::= 'printf' '(<Identificador> + '\n'>)' ';'
