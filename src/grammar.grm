"Name"      = 'TODO: MyLanguage Grammar'
"Author"    =  'TODO: List of Authors'
"Version"   = '0.1'
"About"     = 'TODO: MyLanguage Grammar,'

"Case Sensitive"    = True
"Start Symbol"      = <Programa>

! =================================================
! Conjuntos de Caracteres
! =================================================

{CabecaDoIdentificador} = {Letter}
{CaudaDoIdentificador}  = {Alphanumeric} + [_]

! =================================================
! Símbolos Terminais
! =================================================

identificador   = {CabecaDoIdentificador}{CaudaDoIdentificador}*
Digitos         = ( '-' )? {Number}+ ( '.' {Number}+ )?
Caracter        = '"' ({Letter}|{Number}|'\"'| {Space} |'!' | '"' | '#' | '$' | '%' | '&' | '(' | ')' | '*' | '+'| ',' | '-' |'.' | '/' | '/' | ':' | ';' | '<' | '>' | '=' | '?' | '@' | '[' | ']' | '\' | '^' | '_' | '`'  | '{' | '|' | '}' | '~')* '"'

! =================================================
! Regras
! =================================================

! -------------------------------------------------
! Declaração de Função, Procedimentos, método de início
! -------------------------------------------------

<DeclaracaoDeFuncao>        ::= 'function' <FuncID> '(' <FuncaoProcedimentoFim>

<DeclaracaoDeProcedimento>  ::= 'procedure' Identificador '(' <FuncaoProcedimentoFim>

<FuncaoProcedimentoFim>     ::= <Parametros> ')' <Bloco> 
                            | ')' <Bloco>

<DeclaracaoDeInicio>    ::= 'start' '(' ')' <Bloco>

<Bloco>     ::= '{' <BlocoAux>
<BlocoAux>  ::= <ListaDeIntrucoes> '}'
            | '}'

<FuncID>    ::= <Tipo> Identificador

<Parametros>    ::= <Parametro> <ParametrosAux>
<ParametrosAux> ::= ',' <Parametros>
                | <> ! Produção Vazia

<Parametro>     ::= <Tipo> Identificador

! -------------------------------------------------
! Declaração de Tipo (Typedef)
! -------------------------------------------------

<DeclaracaoDeTypedef>       ::= 'typedef' <DeclaracaoDeTypedefAux>
<DeclaracaoDeTypedefAux>    ::= <Tipo> Identificador ';'
                            | <DeclaracaoDeStruct> ';'

! -------------------------------------------------
! Base e instruções
! -------------------------------------------------

<Programa>      ::= <Declaracoes>

<Declaracoes>   ::= <Declaracao> <Declaracoes>
                | <Declaracao> ! TODO: Adicionar produção vazia para caso do programa não ter declarações

! Aqui devem ficar apenas as estruturas que podem ser criadas fora de um Bloco
! Exemplo: Funções, Variaveis, Estruturas, Typedef, Procedimentos, Start
<Declaracao>    ::= <DeclaracaoDeFuncao>
                | <DeclaracaoDeProcedimento>
                | <DeclaracaoDeInicio>
                | <DeclaracaoDeVar>
                | <DeclaracaoDeConst>
                | <DeclaracaoDeStruct>
                | <DeclaracaoDeTypedef>

<ListaDeIntrucoes>    ::= <Instrucao>
                    | <Instrucao> <ListaDeIntrucoes>

! Instrução deve ser capaz de produzir todos os comandos que podem ficar dentro de um bloco
! Exemplo dos blocos: if, função, procedimento, while, etc... 
! Exemplo das instruções: if, while, Chamada de função, print, scan, etc... ! TODO: Colocar os outros Statements aqui
<Instrucao> ::= <InstrucaoNormal>
            | <EstruturaCondicional>
            | <While>
            | <DeclaracaoDeVar>
            | <DeclaracaoDeConst>
            | <DeclaracaoDeStruct>

! Instrução Normal são as insrtuções de unica linha que terminal com ';'
! Exemplo: a = b;, print();, scan();, chamadaDeFuncao();
<InstrucaoNormal>    ::= <OperacaoDeAtribuicao> ';'
                | <InstrucaoDeRetorno> ';'

<InstrucaoDeRetorno>  ::= 'return' 
                    | 'return' <Expressao>

! -------------------------------------------------
! Tipos
! -------------------------------------------------

<Tipo>     ::= <TipoBase> | <TipoBase> <TipoVetorDeclarando>

<TipoBase>   ::= <Escalar>
            | 'struct' Identificador
            | Identificador

<Escalar>    ::= 'int'
            | 'float'
            | 'bool'
            | 'string'

! Permite utilização de tipos vector, tando em inicialização de variáveis como em retorno de funções

<TipoVetorDeclarando>   ::= <TipoVetorDeclarado> | <TipoVetorDeclarado> <TipoVetorDeclarando>

<TipoVetorDeclarado>    ::= '[' ']'

! -------------------------------------------------
! Precedência de Operadores
! -------------------------------------------------

! TODO: Levels of operator precedence.

<OperacaoDeAtribuicao>  ::= <Final> '=' <Expressao>
                        | Identificador '=' <Expressao>
                        | <Expressao>

! Expressao diz respeito a qualquer conjunto de valores que podem ficar
! do lado direto de uma expressão de atribuição
<Expressao>     ::= <OpAdicao>

<ParametrosFuncao>  ::= <OpAdicao> ',' <ParametrosFuncao>
                    | <OpAdicao>

!<OpAdicao> ::= <OpAdicao> '+' <OpMult> ! TODO: Remover recursividade Esquerda e fatorar
!               | <OpAdicao> '-' <OpMult>
!               | <OpMult>

<OpAdicao> ::= <OpMult> <OpMulAux1> | <OpMult>
<OpMulAux1> ::= <continuarAdicao> <OpMulAux1> | <continuarAdicao>
<continuarAdicao> ::= '+' <OpMult> | '-' <OpMult>

!<OpMult>    ::= <OpMult> '*' <OpUnary> ! TODO: Remover recursividade Esquerda e fatorar
!               | <OpMult> '/' <OpUnary>
!               | <OpUnary>

<OpMult> ::= <OpUnary> <Z> | <OpUnary>
<Z> ::= <continuarMult> <Z> |<continuarMult>
<continuarMult> ::= '*' <OpUnary> | '/' <OpUnary>

<OpUnary>   ::= '!' <OpUnary>
            | '++' <OpUnary>
            | '--' <OpUnary>
            | <Final>
            | <Valor>

<Final>     ::= Identificador <Acessando> 

<Acessando>        ::= <Acesso> | <Acesso> <Acessando> 

<Acesso>        ::= '.' Identificador ! Acesso de campo
                | '[' <Valor> ']' ! Acesso de array


! <Valor> must be the last level of precedence

<Valor>     ::= Identificador '(' <ParametrosFuncao> ')' ! Função ou procedimento com parametros
            | Identificador '(' ')' ! Função ou procedimento sem parametros
            | Identificador ! Valor simples
            | '(' <Expressao> ')'
            | Digitos

! -------------------------------------------------------------------
! Operação relacional e Lógica
! -------------------------------------------------------------------

<ExpressaoRelacional>   ::=  <OpLogica>
                        | '!' <OpLogica> 

<OpLogica>        ::= <OpLogica> <EscalarLogico> <OpRelacional>
                        | <OpRelacional>

<OpRelacional>    ::= <OpRelacional> <EscalarRelacional> <ValorRelacional>
                        | <ValorRelacional>
                        | <Final>

<ValorRelacional> ::= Identificador '(' <ParametrosFuncao> ')' ! Função ou procedimento com parametros
            | Identificador '(' ')' ! Função ou procedimento sem parametros
            | Identificador ! Valor simples
            | '(' <ExpressaoRelacional> ')'
            | Digitos

<EscalarRelacional> 
      ::= '!='
        | '=='
        | '<'
        | '<='
        |'>'
        |'>='

<EscalarLogico>       
        ::= '&&'
        | '||'

! -------------------------------------------------------------------
! Declaração de Bloco Variáveis 
! -------------------------------------------------------------------
<DeclaracaoDeVar>               ::= 'var'  '{'  <DeclaracaoDeVariavelCorpo> '}'

<DeclaracaoDeVariavelCorpo>     ::= <DeclaracaoDeVariavelLinha>
                                | <DeclaracaoDeVariavelLinha> <DeclaracaoDeVariavelCorpo>

<DeclaracaoDeVariavelLinha>     ::= <Tipo> <ExpressaoIdentificadoresVar>

<ExpressaoIdentificadoresVar>   ::= <ExpressaoIdentificadorVar>  ';' 
                                | <ExpressaoIdentificadorVar> ',' <ExpressaoIdentificadoresVar>

<ExpressaoIdentificadorVar>     ::= Identificador '=' <Expressao>
                                | Identificador

! -------------------------------------------------------------------
! Declaração de Bloco Constante 
! -------------------------------------------------------------------

<DeclaracaoDeConst>             ::= 'const'  '{'  <DeclaracaoDeConstanteCorpo> '}'

<DeclaracaoDeConstanteCorpo>    ::= <DeclaracaoDeConstanteLinha>
                                | <DeclaracaoDeConstanteLinha> <DeclaracaoDeConstanteCorpo>

<DeclaracaoDeConstanteLinha>    ::= <Tipo> <ExpressaoIdentificadoresConst>

<ExpressaoIdentificadoresConst> ::= <ExpressaoIdentificadorConst> ';' 
                                | <ExpressaoIdentificadorConst> ',' <ExpressaoIdentificadoresConst>

<ExpressaoIdentificadorConst>   ::= Identificador '=' <Expressao>

! -------------------------------------------------------------------
! Declaração de Bloco Struct 
! -------------------------------------------------------------------

<DeclaracaoDeStruct>       ::= 'struct' Identificador '{'  <DeclaracaoDeStructCorpo> '}'
                                | 'struct' '{'  <DeclaracaoDeStructCorpo> '}'

<DeclaracaoDeStructCorpo>    ::= <DeclaracaoDeStructLinha>
                                | <DeclaracaoDeStructLinha> <DeclaracaoDeStructCorpo>

<DeclaracaoDeStructLinha>    ::= <Tipo> <ExpressaoIdentificadoresStruct>

<ExpressaoIdentificadoresStruct> ::= <ExpressaoIdentificadorStruct> ';' 
                                | <ExpressaoIdentificadorStruct> ',' <ExpressaoIdentificadoresStruct>

<ExpressaoIdentificadorStruct>   ::= Identificador ! Campos em Struct não podem ser previamente iniciadas

! -------------------------------------------------------------------
! Estruturas condicionais: If...Then, If...Then...Else
! -------------------------------------------------------------------

<EstruturaCondicional>    ::= <IfThen>
                                    | <IfThen> 'else' <Bloco>

<IfThen> ::= 'if' '(' <ExpressaoRelacional> ')' 'then' <Bloco>
          
! -------------------------------------------------------------------
! Estruturas condicionais: While
! -------------------------------------------------------------------

<While> ::= 'while' '(' <ExpressaoRelacional> ')' <Bloco>

! -------------------------------------------------------------------
! Print
! Delimitador = /n /t
! -------------------------------------------------------------------

!Comentei esse trecho porque está dando erro
!<print> ::= 'print' '(' <Identificador | <Identificador> <var> <identificador> |
                        !|<Identificador> <var>
                        !|<var> <Identificador>
                        !| ')' ';''

!<printf> ::= 'printf' '(<Identificador> + <delimitador>)' ';' 
!   
!   Fiquei na dúvida se já poderia ser assim:
!
!<printf> ::= 'printf' '(<Identificador> + '\n'>)' ';'
